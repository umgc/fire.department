    /**
     * Passing test for the getAdminComments method, of class User.
     */
    @Test
    public void testGetAdminComments() {
        System.out.println("getAdminComments Test (Passing value)");
        String expResult = "participant";
        String result = user.getAdminComments();
        // Check for and print any violations of validation annotations
        Set<ConstraintViolation<User>> violations = validator.validate(user);
        String message = violations.iterator().hasNext() ? violations.iterator().next().getMessage() : "";
        if (!violations.isEmpty()) {
            System.out.println("Violation caught: " + message);
        }
        // Test method
        assertEquals(expResult, result);
    }

    /**
     * Passing test for the setAdminComments method, of class User.
     */
    @Test
    public void testSetAdminComments() {
        System.out.println("setAdminComments Test (Passing value)");
        String adminComments = "participant";
        user.setAdminComments(adminComments);
        // Check for and print any violations of validation annotations
        Set<ConstraintViolation<User>> violations = validator.validate(user);
        String message = violations.iterator().hasNext() ? violations.iterator().next().getMessage() : "";
        if (!violations.isEmpty()) {
            System.out.println("Violation caught: " + message);
        }
        // Test method
        assertTrue(violations.isEmpty());
    }

    /**
     * Blank value test for the setAdminComments method, of class User.
     */
    @Test
    public void testSetAdminCommentsBlank() {
        System.out.println("setAdminComments Test (Blank value)");
        String adminComments = "";
        user.setAdminComments(adminComments);
        // Check for and print any violations of validation annotations
        Set<ConstraintViolation<User>> violations = validator.validate(user);
        String message = violations.iterator().hasNext() ? violations.iterator().next().getMessage() : "";
        if (!violations.isEmpty()) {
            System.out.println("Violation caught: " + message);
        }
        // Test method
        assertFalse(violations.isEmpty());
    }

    /**
     * Invalid value test for the setAdminComments method, of class User.
     */
    @Test
    public void testSetAdminCommentsInvalid() {
        System.out.println("setAdminComments Test (Injection value)");
        String adminComments = "<script>alert(\"This is an attack!\");</script>";
        user.setAdminComments(adminComments);
        // Check for and print any violations of validation annotations
        Set<ConstraintViolation<User>> violations = validator.validate(user);
        String message = violations.iterator().hasNext() ? violations.iterator().next().getMessage() : "";
        if (!violations.isEmpty()) {
            System.out.println("Violation caught: " + message);
        }
        // Test method
        assertFalse(violations.isEmpty());
    }

    /**
     * Overflow value test for the setAdminComments method, of class User.
     */
    @Test
    public void testSetAdminCommentsOverflow() {
        System.out.println("setAdminComments Test (Overflow value)");
        String adminComments = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        user.setAdminComments(adminComments);
        // Check for and print any violations of validation annotations
        Set<ConstraintViolation<User>> violations = validator.validate(user);
        String message = violations.iterator().hasNext() ? violations.iterator().next().getMessage() : "";
        if (!violations.isEmpty()) {
            System.out.println("Violation caught: " + message);
        }
        // Test method
        assertFalse(violations.isEmpty());
    }