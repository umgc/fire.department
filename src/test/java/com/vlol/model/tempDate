    /**
     * Passing test for the getLastLoginDate method, of class User.
     */
    @Test
    public void testGetLastLoginDate() throws ParseException {
        System.out.println("getLastLoginDate Test (Passing value)");
        Date expResult = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse("1955-11-05 06:00:00");
        Date result = user.getLastLoginDate();
        // Check for and print any violations of validation annotations
        Set<ConstraintViolation<User>> violations = validator.validate(user);
        String message = violations.iterator().hasNext() ? violations.iterator().next().getMessage() : "";
        if (!violations.isEmpty()) {
            System.out.println("Violation caught: " + message);
        }
        // Test method
        assertEquals(expResult, result);
    }

    /**
     * Passing test for the setLastLoginDate method, of class User.
     */
    @Test
    public void testSetLastLoginDate() throws ParseException {
        System.out.println("setLastLoginDate Test (Passing value)");
        Date lastLoginDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse("1955-11-05 06:00:00");
        user.setLastLoginDate(lastLoginDate);
        // Check for and print any violations of validation annotations
        Set<ConstraintViolation<User>> violations = validator.validate(user);
        String message = violations.iterator().hasNext() ? violations.iterator().next().getMessage() : "";
        if (!violations.isEmpty()) {
            System.out.println("Violation caught: " + message);
        }
        // Test method
        assertTrue(violations.isEmpty());
    }

    /**
     * Future value test for the setLastLoginDate method, of class User.
     */
    @Test
    public void testSetLastLoginDateFuture() {
        System.out.println("setLastLoginDate Test (Future value)");
        long millis = System.currentTimeMillis();  
        Date date = new Date(millis + 60000);
        Date lastLoginDate = date;
        user.setLastLoginDate(lastLoginDate);
        // Check for and print any violations of validation annotations
        Set<ConstraintViolation<User>> violations = validator.validate(user);
        String message = violations.iterator().hasNext() ? violations.iterator().next().getMessage() : "";
        if (!violations.isEmpty()) {
            System.out.println("Violation caught: " + message);
        }
        // Test method
        assertFalse(violations.isEmpty());
    }

    /**
     * Null value test for the setLastLoginDate method, of class User.
     */
    @Test
    public void testSetLastLoginDateNull() {
        System.out.println("setLastLoginDate Test (Null value)");
        Date lastLoginDate = null;
        user.setLastLoginDate(lastLoginDate);
        // Check for and print any violations of validation annotations
        Set<ConstraintViolation<User>> violations = validator.validate(user);
        String message = violations.iterator().hasNext() ? violations.iterator().next().getMessage() : "";
        if (!violations.isEmpty()) {
            System.out.println("Violation caught: " + message);
        }
        // Test method
        assertFalse(violations.isEmpty());
    }

    /**
     * Out of Range value test for the setLastLoginDate method, of class User.
     */
    @Test
    public void testSetLastLoginDateOutOfRange() throws ParseException {
        System.out.println("setLastLoginDate Test (Out of Range value)");
        Date lastLoginDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse("1955-13-05 06:00:00");
        user.setLastLoginDate(lastLoginDate);
        // Check for and print any violations of validation annotations
        Set<ConstraintViolation<User>> violations = validator.validate(user);
        String message = violations.iterator().hasNext() ? violations.iterator().next().getMessage() : "";
        if (!violations.isEmpty()) {
            System.out.println("Violation caught: " + message);
        }
        // Test method
        assertFalse(violations.isEmpty());
    }